

# guess time between segments as number of moves above 90th percentile
funcGetClusters = function(x){
  # needs a numeric vector
  assertthat::assert_that(is.numeric(x), msg = "x is not a numeric vector!")
  y = quantile(x, probs = 0.01)
  z = sum(x <= y)
  return(z)
} 

# setup kmeans function using guessed number of residence patches
funcSegment = function(x){
  # kmeans reqs a matrix or coercable object such as a df
  assertthat::assert_that(is.data.frame(x), msg = "x is not a df!")
  nAssumedPatches = funcGetClusters(x$residenceTime)
  x1 = kmeans(x[,c("x", "y", "residenceTime")], centers = nAssumedPatches)
  return(x1[["cluster"]])
}


# use Kmeans
# assign new column in data$data for segment/cluster
data2 = mutate(data2, data = map(data, function(df){
  mutate(df, segment = funcSegment(df))
}))